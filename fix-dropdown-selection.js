/**
 * Fix Dropdown Selection - Kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ kh√¥ng th·ªÉ ch·ªçn dropdown trong ch·∫ø ƒë·ªô t√πy ch·ªânh
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Fix Dropdown Selection loaded');
    
    // T·∫°o s·ª± ki·ªán custom ƒë·ªÉ th√¥ng b√°o r·∫±ng trang ƒë√£ t·∫£i xong
    setTimeout(() => {
        document.dispatchEvent(new CustomEvent('fix-dropdown-ready'));
    }, 1000);
    
    // Theo d√µi khi n√∫t "T√πy Ch·ªânh" ƒë∆∞·ª£c nh·∫•p ƒë·ªÉ k√≠ch ho·∫°t c√°c dropdown
    const customModeButton = document.querySelector('.config-option[data-config="custom"]');
    if (customModeButton) {
        customModeButton.addEventListener('click', handleCustomModeClick);
    }
    
    // ƒê·∫£m b·∫£o dropdown selection lu√¥n ho·∫°t ƒë·ªông ƒë√∫ng trong ch·∫ø ƒë·ªô t√πy ch·ªânh
    function fixDropdownSelection() {
        // S·ª≠ d·ª•ng MutationObserver ƒë·ªÉ theo d√µi c√°c thay ƒë·ªïi trong DOM
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                // Khi m·ªôt dropdown ƒë∆∞·ª£c th√™m ho·∫∑c thu·ªôc t√≠nh c·ªßa n√≥ thay ƒë·ªïi
                if (mutation.type === 'attributes' || mutation.type === 'childList') {
                    // Ki·ªÉm tra t·∫•t c·∫£ c√°c dropdown trong ph·∫ßn c·∫•u h√¨nh
                    const configModeName = document.querySelector('.config-mode-name');
                    const customOptionActive = document.querySelector('.config-option[data-config="custom"].active');
                    if ((configModeName && configModeName.textContent.includes('T√πy Ch·ªânh')) || customOptionActive) {
                        const dropdowns = document.querySelectorAll('.component select');
                        dropdowns.forEach(dropdown => {
                            // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã v√¥ hi·ªáu h√≥a trong ch·∫ø ƒë·ªô t√πy ch·ªânh
                            dropdown.disabled = false;
                            dropdown.parentElement.classList.remove('disabled');
                            
                            // ƒê·∫£m b·∫£o s·ª± ki·ªán onchange v·∫´n ho·∫°t ƒë·ªông
                            dropdown.onchange = function() {
                                const componentType = this.getAttribute('data-component-type');
                                const selectedValue = this.value;
                                console.log(`ƒê√£ ch·ªçn ${selectedValue} cho ${componentType}`);
                                
                                // C·∫≠p nh·∫≠t c·∫•u h√¨nh hi·ªán t·∫°i v·ªõi l·ª±a ch·ªçn m·ªõi
                                try {
                                    window.currentConfigurations = window.currentConfigurations || {};
                                    window.currentConfigurations[componentType] = selectedValue;
                                } catch (error) {
                                    console.error('L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh:', error);
                                }
                            };
                        });
                    }
                }
            });
        });

        // B·∫Øt ƒë·∫ßu quan s√°t c√°c thay ƒë·ªïi tr√™n to√†n b·ªô ph·∫ßn c·∫•u h√¨nh
        const configContainer = document.querySelector('.config-container');
        if (configContainer) {
            observer.observe(configContainer, { 
                attributes: true, 
                childList: true, 
                subtree: true,
                attributeFilter: ['disabled', 'class'] 
            });
        }

        // Thi·∫øt l·∫≠p interval ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a ch·ªØa c√°c dropdown ƒë·ªãnh k·ª≥
        setInterval(() => {
            const configModeName = document.querySelector('.config-mode-name');
            const customOptionActive = document.querySelector('.config-option[data-config="custom"].active');
            if ((configModeName && configModeName.textContent.includes('T√πy Ch·ªânh')) || customOptionActive) {
                const dropdowns = document.querySelectorAll('.component select');
                dropdowns.forEach(dropdown => {
                    dropdown.disabled = false;
                    dropdown.parentElement.classList.remove('disabled');
                });
            }
        }, 500);
    }
    
    // X·ª≠ l√Ω khi ch·∫ø ƒë·ªô t√πy ch·ªânh ƒë∆∞·ª£c ch·ªçn
    function handleCustomModeClick() {
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c x·ª≠ l√Ω kh√°c ƒë√£ ho√†n t·∫•t
        setTimeout(() => {
            // K√≠ch ho·∫°t t·∫•t c·∫£ dropdown
            fixDropdownSelection();
            
            // X√≥a t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i
            clearAllConfigurations();
            
            // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng
            addCustomModeInstructions();
            
            // ƒê·∫£m b·∫£o c√°c dropdown ƒë∆∞·ª£c hi·ªÉn th·ªã v√† c√≥ th·ªÉ t∆∞∆°ng t√°c
            const dropdowns = document.querySelectorAll('.component select');
            dropdowns.forEach(dropdown => {
                dropdown.disabled = false;
                dropdown.parentElement.classList.remove('disabled');
                dropdown.style.pointerEvents = 'auto';
            });
            
            console.log('ƒê√£ k√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh v√† reset t·∫•t c·∫£ dropdown');
        }, 200);
    }
    
    // X√≥a t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i v√† chu·∫©n b·ªã cho vi·ªác ch·ªçn l·∫°i
    function clearAllConfigurations() {
        // Thi·∫øt l·∫≠p l·∫°i t·∫•t c·∫£ dropdown v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
        const dropdowns = document.querySelectorAll('.component select');
        dropdowns.forEach(dropdown => {
            // ƒê·∫∑t v·ªÅ gi√° tr·ªã ƒë·∫ßu ti√™n ho·∫∑c ƒë·ªÉ tr·ªëng
            if (dropdown.options.length > 0) {
                dropdown.selectedIndex = 0;
            }
            
            // Th√™m s·ª± ki·ªán theo d√µi thay ƒë·ªïi
            dropdown.addEventListener('change', function() {
                const componentType = this.getAttribute('data-component-type');
                const selectedValue = this.value;
                console.log(`Ch·∫ø ƒë·ªô t√πy ch·ªânh: ƒê√£ ch·ªçn ${selectedValue} cho ${componentType}`);
            });
        });
        
        // Kh·ªüi t·∫°o l·∫°i ƒë·ªëi t∆∞·ª£ng l∆∞u tr·ªØ c·∫•u h√¨nh n·∫øu c·∫ßn
        window.currentConfigurations = {};
        
        console.log('ƒê√£ x√≥a t·∫•t c·∫£ c·∫•u h√¨nh v√† chu·∫©n b·ªã cho vi·ªác ch·ªçn l·∫°i');
    }
    
    // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô t√πy ch·ªânh
    function addCustomModeInstructions() {
        // X√≥a h∆∞·ªõng d·∫´n c≈© n·∫øu c√≥
        const existingInstructions = document.querySelector('.custom-mode-instructions');
        if (existingInstructions) {
            existingInstructions.remove();
        }
        
        // T·∫°o ph·∫ßn t·ª≠ h∆∞·ªõng d·∫´n m·ªõi
        const instructions = document.createElement('div');
        instructions.className = 'custom-mode-instructions';
        instructions.style.padding = '10px';
        instructions.style.margin = '10px 0';
        instructions.style.backgroundColor = '#f8f9fa';
        instructions.style.border = '1px solid #ddd';
        instructions.style.borderRadius = '5px';
        instructions.style.color = '#333';
        
        instructions.innerHTML = `
            <h4 style="margin-top: 0; color: #0056b3;">H∆∞·ªõng d·∫´n ch·∫ø ƒë·ªô T√πy Ch·ªânh</h4>
            <p>Trong ch·∫ø ƒë·ªô n√†y, b·∫°n c√≥ th·ªÉ t·ª± do l·ª±a ch·ªçn c√°c linh ki·ªán ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa m√¨nh:</p>
            <ol>
                <li>S·ª≠ d·ª•ng c√°c dropdown b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn t·ª´ng linh ki·ªán</li>
                <li>M·ªói l·ª±a ch·ªçn s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i t·ª± ƒë·ªông</li>
                <li>B·∫°n c√≥ th·ªÉ thay ƒë·ªïi l·ª±a ch·ªçn b·∫•t k·ª≥ l√∫c n√†o</li>
            </ol>
        `;
        
        // Ch√®n h∆∞·ªõng d·∫´n v√†o tr∆∞·ªõc ph·∫ßn dropdown
        const componentsSection = document.querySelector('.components-section');
        if (componentsSection) {
            componentsSection.insertBefore(instructions, componentsSection.firstChild);
        }
    }
    
    // Trigger khi trang ƒë√£ t·∫£i xong
    document.addEventListener('fix-dropdown-ready', function() {
        handleCustomModeClick();
        
        // Ki·ªÉm tra n·∫øu ch·∫ø ƒë·ªô t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c ch·ªçn
        const customOption = document.querySelector('.config-option[data-config="custom"]');
        if (customOption && customOption.classList.contains('active')) {
            setTimeout(() => {
                customOption.click(); // K√≠ch ho·∫°t click event ƒë·ªÉ ch·∫°y h√†m x·ª≠ l√Ω
            }, 500);
        }
    });
}); 