/**
 * Fix Dropdown Selection - Kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ kh√¥ng th·ªÉ ch·ªçn dropdown trong ch·∫ø ƒë·ªô t√πy ch·ªânh
 * Phi√™n b·∫£n tƒÉng c∆∞·ªùng: x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho thi·∫øt b·ªã c·∫£m ·ª©ng v√† Safari tr√™n iOS
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Fix Dropdown Selection loaded (Enhanced version)');
    
    // Ph√°t hi·ªán thi·∫øt b·ªã di ƒë·ªông
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    
    if (isMobile) {
        console.log('üì± Mobile device detected: ' + navigator.userAgent);
        if (isIOS) {
            console.log('üçé iOS device detected - applying special fixes');
            // Th√™m class ƒë·∫∑c bi·ªát cho body ƒë·ªÉ √°p d·ª•ng CSS cho iOS
            document.body.classList.add('ios-device');
        }
    }
    
    // T·∫°o s·ª± ki·ªán custom ƒë·ªÉ th√¥ng b√°o r·∫±ng trang ƒë√£ t·∫£i xong
    setTimeout(() => {
        document.dispatchEvent(new CustomEvent('fix-dropdown-ready'));
        console.log('üì¢ fix-dropdown-ready event dispatched');
    }, 1000);
    
    // Tr·ª±c ti·∫øp k√≠ch ho·∫°t t·∫•t c·∫£ c√°c dropdown ngay khi t·∫£i trang
    enableAllDropdowns();
    
    // Theo d√µi khi n√∫t "T√πy Ch·ªânh" ƒë∆∞·ª£c nh·∫•p ƒë·ªÉ k√≠ch ho·∫°t c√°c dropdown
    const customModeButton = document.querySelector('.config-option[data-config="custom"]');
    if (customModeButton) {
        console.log('‚úÖ Found custom mode button');
        
        // X√≥a t·∫•t c·∫£ event listeners c≈© n·∫øu c√≥
        const newCustomButton = customModeButton.cloneNode(true);
        customModeButton.parentNode.replaceChild(newCustomButton, customModeButton);
        
        // Th√™m event listeners m·ªõi
        ['click', 'touchstart'].forEach(eventType => {
            newCustomButton.addEventListener(eventType, function(e) {
                if (eventType === 'touchstart') {
                    // NgƒÉn ch·∫∑n c√°c s·ª± ki·ªán kh√°c tr√™n touch device
                    e.preventDefault();
                }
                console.log("üëÜ Custom mode button " + eventType);
                handleCustomModeClick();
            }, { passive: false });
        });
    } else {
        console.warn('‚ùå Custom mode button not found');
    }
    
    // Th√™m s·ª± ki·ªán touch v√† click tr·ª±c ti·∫øp cho t·∫•t c·∫£ dropdown
    document.querySelectorAll('.component select').forEach(dropdown => {
        try {
            console.log('Processing dropdown: ' + dropdown.id);
            
            // ƒê·∫£m b·∫£o dropdown c√≥ th·ªÉ nh·∫≠n t·∫•t c·∫£ lo·∫°i s·ª± ki·ªán t∆∞∆°ng t√°c
            ['mousedown', 'touchstart', 'focus', 'click'].forEach(eventType => {
                dropdown.addEventListener(eventType, function(e) {
                    // Kh√¥ng ngƒÉn ch·∫∑n s·ª± ki·ªán m·∫∑c ƒë·ªãnh tr√™n iOS ƒë·ªÉ tr√°nh l·ªói
                    if (eventType === 'touchstart' && !isIOS) {
                        e.preventDefault(); // Ch·ªâ ngƒÉn tr√™n Android
                    }
                    
                    console.log("üëÜ " + eventType + " tr√™n dropdown: " + this.id);
                    
                    // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã disabled
                    this.disabled = false;
                    
                    // X√≥a thu·ªôc t√≠nh readonly n·∫øu c√≥
                    this.removeAttribute('readonly');
                    
                    // K√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh n·∫øu ch∆∞a ƒë∆∞·ª£c ch·ªçn
                    const customOption = document.querySelector('.config-option[data-config="custom"]');
                    if (customOption && !customOption.classList.contains('active')) {
                        customOption.click();
                    }
                    
                    // Th√™m class ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i active
                    this.classList.add('active-dropdown');
                    this.focus();
                }, isIOS ? { passive: true } : { passive: false });
            });
            
            // Fix ƒë·∫∑c bi·ªát cho iOS Safari
            if (isIOS) {
                // iOS Safari c·∫ßn k√≠ch th∆∞·ªõc l·ªõn h∆°n ƒë·ªÉ d·ªÖ d√†ng t∆∞∆°ng t√°c
                dropdown.style.fontSize = '16px'; // NgƒÉn iOS zoom v√†o form
                dropdown.style.height = '44px'; // Touch target size ph√π h·ª£p
                dropdown.style.padding = '10px';
                dropdown.style.marginBottom = '15px';
                
                // ƒê·∫£m b·∫£o dropdown hi·ªÉn th·ªã ƒë√∫ng tr√™n iOS
                dropdown.style.appearance = 'menulist';
                dropdown.style.webkitAppearance = 'menulist';
            }
            
            // Thay th·∫ø dropdown ƒë·ªÉ x√≥a c√°c s·ª± ki·ªán c√≥ th·ªÉ ngƒÉn ch·∫∑n
            const newDropdown = dropdown.cloneNode(true);
            
            // Copy styles t·ª´ dropdown g·ªëc
            if (window.getComputedStyle) {
                const computedStyle = window.getComputedStyle(dropdown);
                for (let key of computedStyle) {
                    try {
                        newDropdown.style[key] = computedStyle[key];
                    } catch (e) {
                        // B·ªè qua l·ªói CSS kh√¥ng h·ªó tr·ª£
                    }
                }
            }
            
            dropdown.parentNode.replaceChild(newDropdown, dropdown);
            
            // Th√™m s·ª± ki·ªán change m·ªõi cho dropdown
            newDropdown.addEventListener('change', function(e) {
                console.log('üîÑ Dropdown ƒë√£ thay ƒë·ªïi:', this.id, 'Gi√° tr·ªã:', this.value);
                
                // Fix l·ªói kh√¥ng trigger s·ª± ki·ªán change
                try {
                    // Trigger s·ª± ki·ªán change th·ªß c√¥ng
                    const event = new Event('change', { bubbles: true });
                    this.dispatchEvent(event);
                } catch (err) {
                    console.error('Kh√¥ng th·ªÉ trigger s·ª± ki·ªán change:', err);
                }
                
                // ƒê·∫£m b·∫£o ·ªü ch·∫ø ƒë·ªô t√πy ch·ªânh
                const customOption = document.querySelector('.config-option[data-config="custom"]');
                if (customOption) {
                    customOption.classList.add('active');
                }
            });
        } catch (err) {
            console.error('L·ªói khi x·ª≠ l√Ω dropdown ' + dropdown.id + ':', err);
        }
    });
    
    // ƒê·∫£m b·∫£o dropdown selection lu√¥n ho·∫°t ƒë·ªông ƒë√∫ng trong ch·∫ø ƒë·ªô t√πy ch·ªânh
    function fixDropdownSelection() {
        // S·ª≠ d·ª•ng MutationObserver ƒë·ªÉ theo d√µi c√°c thay ƒë·ªïi trong DOM
        try {
            const observer = new MutationObserver(function(mutations) {
                console.log('üîÑ DOM ƒë√£ thay ƒë·ªïi, k√≠ch ho·∫°t l·∫°i dropdown');
                enableAllDropdowns();
            });

            // B·∫Øt ƒë·∫ßu quan s√°t c√°c thay ƒë·ªïi tr√™n to√†n b·ªô ph·∫ßn components-grid
            const componentsGrid = document.querySelector('.components-grid');
            if (componentsGrid) {
                observer.observe(componentsGrid, { 
                    attributes: true, 
                    childList: true, 
                    subtree: true,
                    attributeFilter: ['disabled', 'class'] 
                });
            } else {
                console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y .components-grid ƒë·ªÉ quan s√°t');
                // Quan s√°t to√†n b·ªô body n·∫øu kh√¥ng t√¨m th·∫•y components-grid
                observer.observe(document.body, { 
                    attributes: true, 
                    childList: true, 
                    subtree: true,
                    attributeFilter: ['disabled', 'class'] 
                });
            }
        } catch (err) {
            console.error('‚ùå L·ªói khi t·∫°o MutationObserver:', err);
        }

        // Thi·∫øt l·∫≠p interval ƒë·ªÉ li√™n t·ª•c k√≠ch ho·∫°t t·∫•t c·∫£ dropdown
        const intervalID = setInterval(enableAllDropdowns, 500);
        
        // D·ª´ng interval sau 30 gi√¢y ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n
        setTimeout(() => {
            clearInterval(intervalID);
            console.log('üõë ƒê√£ d·ª´ng interval ki·ªÉm tra dropdown sau 30 gi√¢y');
        }, 30000);
    }
    
    // K√≠ch ho·∫°t t·∫•t c·∫£ dropdown ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c
    function enableAllDropdowns() {
        try {
            const dropdowns = document.querySelectorAll('.component select');
            console.log(`üîç ƒêang k√≠ch ho·∫°t ${dropdowns.length} dropdown`);
            
            dropdowns.forEach(dropdown => {
                try {
                    // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã v√¥ hi·ªáu h√≥a
                    dropdown.disabled = false;
                    
                    // Th√™m class ƒë·ªÉ √°p d·ª•ng CSS l√†m n·ªïi b·∫≠t
                    dropdown.classList.add('custom-mode-dropdown');
                    
                    // ƒê·∫£m b·∫£o t·∫•t c·∫£ option c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c (tr·ª´ option ƒë·∫ßu ti√™n n·∫øu l√† placeholder)
                    Array.from(dropdown.options).forEach((option, index) => {
                        if (index === 0 && option.value === "") {
                            // Gi·ªØ nguy√™n option ƒë·∫ßu ti√™n (placeholder)
                        } else {
                            option.disabled = false;
                        }
                    });
                    
                    // ƒê·∫£m b·∫£o dropdown c√≥ th·ªÉ t∆∞∆°ng t√°c
                    dropdown.style.pointerEvents = 'auto';
                    dropdown.style.cursor = 'pointer';
                    
                    // X√≥a thu·ªôc t√≠nh readonly n·∫øu c√≥
                    dropdown.removeAttribute('readonly');
                    
                    // Th√™m CSS ƒë·∫∑c bi·ªát cho thi·∫øt b·ªã di ƒë·ªông
                    if (isMobile) {
                        // TƒÉng k√≠ch th∆∞·ªõc ƒë·ªÉ d·ªÖ ch·∫°m
                        dropdown.style.height = isIOS ? '44px' : '40px';
                        dropdown.style.fontSize = '16px'; // NgƒÉn iOS zoom
                        
                        // ƒê·∫£m b·∫£o appearance ƒë√∫ng
                        dropdown.style.appearance = 'menulist';
                        dropdown.style.webkitAppearance = 'menulist';
                        dropdown.style.mozAppearance = 'menulist';
                    }
                    
                    // ƒê·∫£m b·∫£o parent container kh√¥ng b·ªã disabled
                    if (dropdown.parentElement) {
                        dropdown.parentElement.classList.remove('disabled');
                    }
                } catch (err) {
                    console.error('‚ùå L·ªói khi k√≠ch ho·∫°t dropdown ' + dropdown.id + ':', err);
                }
            });
        } catch (err) {
            console.error('‚ùå L·ªói trong enableAllDropdowns:', err);
        }
    }
    
    // X·ª≠ l√Ω khi ch·∫ø ƒë·ªô t√πy ch·ªânh ƒë∆∞·ª£c ch·ªçn
    function handleCustomModeClick() {
        console.log('üîß ƒêang x·ª≠ l√Ω k√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh...');
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c x·ª≠ l√Ω kh√°c ƒë√£ ho√†n t·∫•t
        setTimeout(() => {
            // K√≠ch ho·∫°t t·∫•t c·∫£ dropdown
            fixDropdownSelection();
            enableAllDropdowns();
            
            // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng
            addCustomModeInstructions();
            
            console.log('‚úÖ ƒê√£ k√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh v√† k√≠ch ho·∫°t t·∫•t c·∫£ dropdown');
        }, 100);
    }
    
    // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô t√πy ch·ªânh
    function addCustomModeInstructions() {
        try {
            // X√≥a h∆∞·ªõng d·∫´n c≈© n·∫øu c√≥
            const existingInstructions = document.querySelector('.custom-mode-instructions');
            if (existingInstructions) {
                existingInstructions.remove();
            }
            
            // T·∫°o ph·∫ßn t·ª≠ h∆∞·ªõng d·∫´n m·ªõi
            const instructions = document.createElement('div');
            instructions.className = 'custom-mode-instructions';
            instructions.style.padding = '10px';
            instructions.style.margin = '10px 0';
            instructions.style.backgroundColor = '#f8f9fa';
            instructions.style.border = '1px solid #ddd';
            instructions.style.borderRadius = '5px';
            instructions.style.color = '#333';
            instructions.style.fontSize = isMobile ? '14px' : '16px';
            
            // Th√™m n·ªôi dung h∆∞·ªõng d·∫´n
            let content = `
                <h4 style="margin-top: 0; color: #0056b3;">H∆∞·ªõng d·∫´n ch·∫ø ƒë·ªô T√πy Ch·ªânh</h4>
                <p>Trong ch·∫ø ƒë·ªô n√†y, b·∫°n c√≥ th·ªÉ t·ª± do l·ª±a ch·ªçn c√°c linh ki·ªán ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa m√¨nh:</p>
                <ol>
                    <li>B·∫•m v√†o c√°c dropdown b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn t·ª´ng linh ki·ªán</li>
                    <li>M·ªói l·ª±a ch·ªçn s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i t·ª± ƒë·ªông</li>
                    <li>B·∫°n c√≥ th·ªÉ thay ƒë·ªïi l·ª±a ch·ªçn b·∫•t k·ª≥ l√∫c n√†o</li>
                </ol>
            `;
            
            // Th√™m h∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát cho thi·∫øt b·ªã iOS
            if (isIOS) {
                content += `
                    <div style="margin-top: 10px; padding: 8px; background-color: #fff4e5; border: 1px solid #ffc107; border-radius: 4px;">
                        <p style="margin: 0; font-weight: bold; color: #856404;">L∆∞u √Ω cho ng∆∞·ªùi d√πng iOS:</p>
                        <p style="margin: 5px 0 0 0;">N·∫øu dropdown kh√¥ng ph·∫£n h·ªìi, h√£y b·∫•m v√† gi·ªØ trong 1 gi√¢y r·ªìi th·∫£ ra ƒë·ªÉ m·ªü danh s√°ch l·ª±a ch·ªçn.</p>
                    </div>
                `;
            }
            
            instructions.innerHTML = content;
            
            // Ch√®n h∆∞·ªõng d·∫´n v√†o tr∆∞·ªõc ph·∫ßn dropdown
            const componentSection = document.querySelector('#component-selection .section-header');
            if (componentSection) {
                componentSection.after(instructions);
            } else {
                console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y section header ƒë·ªÉ ch√®n h∆∞·ªõng d·∫´n');
                // Th·ª≠ ch√®n v√†o v·ªã tr√≠ kh√°c
                const componentsGrid = document.querySelector('.components-grid');
                if (componentsGrid) {
                    componentsGrid.parentNode.insertBefore(instructions, componentsGrid);
                }
            }
        } catch (err) {
            console.error('‚ùå L·ªói khi th√™m h∆∞·ªõng d·∫´n:', err);
        }
    }
    
    // K√≠ch ho·∫°t m·ªôt l·∫ßn n·ªØa khi trang ƒë√£ t·∫£i xong
    document.addEventListener('fix-dropdown-ready', function() {
        console.log('üì¢ Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán fix-dropdown-ready');
        handleCustomModeClick();
        
        // Ki·ªÉm tra n·∫øu ch·∫ø ƒë·ªô t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c ch·ªçn
        const customOption = document.querySelector('.config-option[data-config="custom"]');
        if (customOption) {
            console.log('Tr·∫°ng th√°i custom option:', customOption.classList.contains('active') ? 'active' : 'inactive');
            
            // Lu√¥n k√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh m·∫∑c ƒë·ªãnh
            if (!customOption.classList.contains('active')) {
                console.log('K√≠ch ho·∫°t n√∫t custom');
                customOption.click();
            } else {
                console.log('Custom ƒë√£ active, v·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω');
                handleCustomModeClick(); // V·∫´n x·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ dropdown ƒë∆∞·ª£c k√≠ch ho·∫°t
            }
        } else {
            console.warn('‚ùå Kh√¥ng t√¨m th·∫•y custom option');
        }
    });
}); 