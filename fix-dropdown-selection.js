/**
 * Fix Dropdown Selection - Kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ kh√¥ng th·ªÉ ch·ªçn dropdown trong ch·∫ø ƒë·ªô t√πy ch·ªânh
 * Phi√™n b·∫£n tƒÉng c∆∞·ªùng: x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho thi·∫øt b·ªã c·∫£m ·ª©ng v√† Safari tr√™n iOS
 * Phi√™n b·∫£n 2.0: Gi·∫£m thi·ªÉu log, t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Fix Dropdown Selection v2.0 loaded');
    
    // Bi·∫øn theo d√µi tr·∫°ng th√°i ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
    let isProcessing = false;
    let customModeActivated = false;
    let fixesApplied = false;
    let observerActive = false;
    
    // Ph√°t hi·ªán thi·∫øt b·ªã di ƒë·ªông
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    
    if (isMobile) {
        console.log('üì± Mobile device detected' + (isIOS ? ' (iOS)' : ''));
        if (isIOS) {
            document.body.classList.add('ios-device');
        }
    }
    
    // Ch·ª©c nƒÉng ch√≠nh: k√≠ch ho·∫°t t·∫•t c·∫£ dropdown
    function enableAllDropdowns(silent = false) {
        // Tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
        if (isProcessing) return;
        isProcessing = true;
        
        try {
            const dropdowns = document.querySelectorAll('.component select');
            if (!silent) {
                console.log(`Enabling ${dropdowns.length} dropdowns`);
            }
            
            dropdowns.forEach(dropdown => {
                try {
                    // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã v√¥ hi·ªáu h√≥a
                    dropdown.disabled = false;
                    dropdown.classList.add('custom-mode-dropdown');
                    
                    // X√≥a c√°c thu·ªôc t√≠nh h·∫°n ch·∫ø
                    dropdown.removeAttribute('readonly');
                    dropdown.style.pointerEvents = 'auto';
                    dropdown.style.cursor = 'pointer';
                    
                    // B·∫≠t t·∫•t c·∫£ options
                    Array.from(dropdown.options).forEach((option, index) => {
                        if (index === 0 && option.value === "") {
                            // Gi·ªØ nguy√™n placeholder
                        } else {
                            option.disabled = false;
                        }
                    });
                    
                    // T·ªëi ∆∞u h√≥a cho thi·∫øt b·ªã mobile
                    if (isMobile && !dropdown.hasAttribute('mobile-optimized')) {
                        dropdown.setAttribute('mobile-optimized', 'true');
                        
                        // ƒê·∫∑t k√≠ch th∆∞·ªõc ph√π h·ª£p cho t·ª´ng lo·∫°i thi·∫øt b·ªã
                        dropdown.style.height = isIOS ? '44px' : '40px';
                        dropdown.style.fontSize = '16px';
                        
                        // ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng
                        dropdown.style.appearance = 'menulist';
                        dropdown.style.webkitAppearance = 'menulist';
                        dropdown.style.mozAppearance = 'menulist';
                    }
                    
                    // ƒê·∫£m b·∫£o container kh√¥ng b·ªã disabled
                    if (dropdown.parentElement && dropdown.parentElement.classList.contains('disabled')) {
                        dropdown.parentElement.classList.remove('disabled');
                    }
                } catch (err) {
                    console.error('Error processing dropdown:', err);
                }
            });
        } catch (err) {
            console.error('Error in enableAllDropdowns:', err);
        } finally {
            isProcessing = false;
        }
    }
    
    // Thi·∫øt l·∫≠p MutationObserver ƒë·ªÉ theo d√µi thay ƒë·ªïi DOM m·ªôt l·∫ßn duy nh·∫•t
    function setupMutationObserver() {
        if (observerActive) return;
        
        try {
            const observer = new MutationObserver(function(mutations) {
                // Ch·ªâ k√≠ch ho·∫°t dropdown khi c·∫ßn thi·∫øt
                const needsUpdate = mutations.some(mutation => {
                    return mutation.type === 'attributes' && 
                           (mutation.attributeName === 'disabled' || 
                            mutation.attributeName === 'class');
                });
                
                if (needsUpdate) {
                    // S·ª≠ d·ª•ng silent mode ƒë·ªÉ tr√°nh log qu√° nhi·ªÅu
                    enableAllDropdowns(true);
                }
            });

            // Quan s√°t ch·ªçn l·ªçc ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
            const componentsGrid = document.querySelector('.components-grid');
            if (componentsGrid) {
                observer.observe(componentsGrid, { 
                    attributes: true, 
                    childList: false, 
                    subtree: true,
                    attributeFilter: ['disabled', 'class'] 
                });
                observerActive = true;
            } else {
                // Fallback n·∫øu kh√¥ng t√¨m th·∫•y components grid
                const componentSection = document.querySelector('#component-selection');
                if (componentSection) {
                    observer.observe(componentSection, {
                        attributes: true,
                        childList: false,
                        subtree: true,
                        attributeFilter: ['disabled', 'class']
                    });
                    observerActive = true;
                }
            }
            
            console.log('DOM observer set up successfully');
        } catch (err) {
            console.error('Error setting up observer:', err);
        }
    }
    
    // X·ª≠ l√Ω khi ch·∫ø ƒë·ªô t√πy ch·ªânh ƒë∆∞·ª£c ch·ªçn
    function handleCustomModeClick() {
        if (customModeActivated) return;
        
        try {
            console.log('Activating custom mode...');
            
            // K√≠ch ho·∫°t t·∫•t c·∫£ dropdown
            enableAllDropdowns();
            
            // Thi·∫øt l·∫≠p MutationObserver n·∫øu ch∆∞a
            if (!observerActive) {
                setupMutationObserver();
            }
            
            // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng
            addCustomModeInstructions();
            
            // ƒê√°nh d·∫•u ƒë√£ k√≠ch ho·∫°t
            customModeActivated = true;
            
            console.log('Custom mode activated');
        } catch (err) {
            console.error('Error in handleCustomModeClick:', err);
        }
    }
    
    // Th√™m h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng ·ªü ch·∫ø ƒë·ªô t√πy ch·ªânh
    function addCustomModeInstructions() {
        try {
            // Kh√¥ng th√™m l·∫°i n·∫øu ƒë√£ t·ªìn t·∫°i
            if (document.querySelector('.custom-mode-instructions')) {
                return;
            }
            
            const instructions = document.createElement('div');
            instructions.className = 'custom-mode-instructions';
            instructions.style.padding = '10px';
            instructions.style.margin = '10px 0';
            instructions.style.backgroundColor = '#f8f9fa';
            instructions.style.border = '1px solid #ddd';
            instructions.style.borderRadius = '5px';
            instructions.style.color = '#333';
            instructions.style.fontSize = isMobile ? '14px' : '16px';
            
            // N·ªôi dung h∆∞·ªõng d·∫´n
            let content = `
                <h4 style="margin-top: 0; color: #0056b3;">H∆∞·ªõng d·∫´n ch·∫ø ƒë·ªô T√πy Ch·ªânh</h4>
                <p>Trong ch·∫ø ƒë·ªô n√†y, b·∫°n c√≥ th·ªÉ t·ª± do l·ª±a ch·ªçn c√°c linh ki·ªán ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa m√¨nh:</p>
                <ol>
                    <li>B·∫•m v√†o c√°c dropdown b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn t·ª´ng linh ki·ªán</li>
                    <li>M·ªói l·ª±a ch·ªçn s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i t·ª± ƒë·ªông</li>
                    <li>B·∫°n c√≥ th·ªÉ thay ƒë·ªïi l·ª±a ch·ªçn b·∫•t k·ª≥ l√∫c n√†o</li>
                </ol>
            `;
            
            // Th√™m h∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát cho thi·∫øt b·ªã iOS
            if (isIOS) {
                content += `
                    <div style="margin-top: 10px; padding: 8px; background-color: #fff4e5; border: 1px solid #ffc107; border-radius: 4px;">
                        <p style="margin: 0; font-weight: bold; color: #856404;">L∆∞u √Ω cho ng∆∞·ªùi d√πng iOS:</p>
                        <p style="margin: 5px 0 0 0;">N·∫øu dropdown kh√¥ng ph·∫£n h·ªìi, h√£y b·∫•m v√† gi·ªØ trong 1 gi√¢y r·ªìi th·∫£ ra ƒë·ªÉ m·ªü danh s√°ch l·ª±a ch·ªçn.</p>
                    </div>
                `;
            }
            
            instructions.innerHTML = content;
            
            // Ch√®n h∆∞·ªõng d·∫´n v√†o UI
            const insertPoint = 
                document.querySelector('#component-selection .section-header') || 
                document.querySelector('.components-grid');
                
            if (insertPoint) {
                if (insertPoint.className.includes('section-header')) {
                    insertPoint.after(instructions);
                } else {
                    insertPoint.parentNode.insertBefore(instructions, insertPoint);
                }
            }
        } catch (err) {
            console.error('Error adding instructions:', err);
        }
    }
    
    // === Thi·∫øt l·∫≠p c√°c event listeners ===
    
    // Theo d√µi n√∫t "T√πy Ch·ªânh"
    function setupCustomButton() {
        const customModeButton = document.querySelector('.config-option[data-config="custom"]');
        if (!customModeButton) {
            console.warn('Custom mode button not found');
            return;
        }
        
        try {
            // ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt l·∫ßn s·ª± ki·ªán ƒë∆∞·ª£c g·∫Øn
            const newButton = customModeButton.cloneNode(true);
            customModeButton.parentNode.replaceChild(newButton, customModeButton);
            
            // X·ª≠ l√Ω c·∫£ click th√¥ng th∆∞·ªùng v√† touch
            newButton.addEventListener('click', handleCustomModeClick);
            
            if (isMobile) {
                newButton.addEventListener('touchstart', function(e) {
                    handleCustomModeClick();
                }, { passive: true });
            }
            
            console.log('Custom button set up');
        } catch (err) {
            console.error('Error setting up custom button:', err);
        }
    }
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c dropdown
    function setupDropdowns() {
        const dropdowns = document.querySelectorAll('.component select');
        if (!dropdowns.length) {
            console.warn('No dropdowns found');
            return;
        }
        
        console.log(`Setting up ${dropdowns.length} dropdowns`);
        
        dropdowns.forEach(dropdown => {
            try {
                // Ch·ªâ thi·∫øt l·∫≠p m·ªôt l·∫ßn m·ªói dropdown
                if (dropdown.hasAttribute('event-setup')) return;
                
                // S·ª≠ d·ª•ng cloneNode ƒë·ªÉ x√≥a t·∫•t c·∫£ event listener c≈©
                const newDropdown = dropdown.cloneNode(true);
                dropdown.parentNode.replaceChild(newDropdown, dropdown);
                
                // ƒê√°nh d·∫•u ƒë√£ thi·∫øt l·∫≠p
                newDropdown.setAttribute('event-setup', 'true');
                
                // ƒê·∫£m b·∫£o dropdown kh√¥ng b·ªã v√¥ hi·ªáu h√≥a ban ƒë·∫ßu
                newDropdown.disabled = false;
                newDropdown.classList.add('custom-mode-dropdown');
                
                // Th√™m s·ª± ki·ªán click/touch
                if (isMobile) {
                    newDropdown.addEventListener('touchstart', function(e) {
                        // K√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh khi dropdown ƒë∆∞·ª£c ch·∫°m
                        activateCustomMode();
                        
                        // ƒê·∫£m b·∫£o dropdown c√≥ th·ªÉ nh·∫≠n input
                        this.disabled = false;
                        this.classList.add('active-dropdown');
                    }, { passive: true });
                }
                
                // S·ª± ki·ªán click ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p touch kh√¥ng ho·∫°t ƒë·ªông
                newDropdown.addEventListener('mousedown', function() {
                    activateCustomMode();
                    this.disabled = false;
                });
                
                // S·ª± ki·ªán focus
                newDropdown.addEventListener('focus', function() {
                    this.classList.add('active-dropdown');
                });
                
                // S·ª± ki·ªán blur
                newDropdown.addEventListener('blur', function() {
                    this.classList.remove('active-dropdown');
                });
                
                // S·ª± ki·ªán change
                newDropdown.addEventListener('change', function() {
                    // ƒê·∫£m b·∫£o ·ªü ch·∫ø ƒë·ªô t√πy ch·ªânh
                    activateCustomMode();
                });
                
            } catch (err) {
                console.error('Error setting up dropdown:', err);
            }
        });
    }
    
    // K√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh n·∫øu ch∆∞a ƒë∆∞·ª£c ch·ªçn
    function activateCustomMode() {
        if (customModeActivated) return;
        
        const customOption = document.querySelector('.config-option[data-config="custom"]');
        if (customOption && !customOption.classList.contains('active')) {
            customOption.click();
        } else {
            handleCustomModeClick();
        }
    }
    
    // === Kh·ªüi t·∫°o ===
    
    // √Åp d·ª•ng c√°c s·ª≠a ƒë·ªïi khi trang ƒë√£ t·∫£i
    function initializeDropdownFixes() {
        if (fixesApplied) return;
        
        try {
            // Thi·∫øt l·∫≠p c√°c event listeners
            setupCustomButton();
            setupDropdowns();
            
            // K√≠ch ho·∫°t dropdown ban ƒë·∫ßu
            enableAllDropdowns();
            
            // Thi·∫øt l·∫≠p MutationObserver
            setupMutationObserver();
            
            // ƒê√°nh d·∫•u ƒë√£ √°p d·ª•ng
            fixesApplied = true;
            
            console.log('Dropdown fixes initialized');
            
            // K√≠ch ho·∫°t ch·∫ø ƒë·ªô t√πy ch·ªânh m·∫∑c ƒë·ªãnh n·∫øu ƒëang ƒë∆∞·ª£c ch·ªçn
            const customOption = document.querySelector('.config-option[data-config="custom"]');
            if (customOption && customOption.classList.contains('active')) {
                handleCustomModeClick();
            }
        } catch (err) {
            console.error('Error in initialization:', err);
        }
    }
    
    // K√≠ch ho·∫°t ngay l·∫≠p t·ª©c
    initializeDropdownFixes();
    
    // ƒê·∫£m b·∫£o ch·∫°y ngay c·∫£ khi DOMContentLoaded ƒë√£ x·∫£y ra
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setTimeout(initializeDropdownFixes, 100);
    }
}); 